---
# Install and launch a rally benchmark
- name: Install rally dependencies
  apt: name="{{ item }}" state=present
  with_items:
    # sqlite
    - libpq-dev
    - libxml2-dev
    - libxslt1-dev
    # rally
    - build-essential
    - libssl-dev
    - libffi-dev
    - python-virtualenv
    - python-netifaces
    - python-dev

- name: Create a directory for the virutalenv
  file: path=/tmp/rally-venv state=directory

- name: Install python mongo client for OSProfiler and Rally into the venv
  pip:
     name: "{{ item }}"
     state: present
     virtualenv: /tmp/rally-venv
  with_items:
    - pymongo # apt: python-pymongo is too old for OSProfiler
    - "{{ rally_pip }}"

- name: Create Rally result directory
  file: path=/root/rally_home state=directory

- name: Create Rally configuration directory
  file: path=/etc/rally state=directory

- name: Copy Rally configuration that set database to sqlite
  copy:
    src: rally.conf
    dest: /etc/rally/rally.conf

- name: Initialize database
  command: /tmp/rally-venv/bin/rally-manage db recreate
  args:
    chdir: /root/rally_home

# NOTE: without the pause the file seems not to be synced in the next
# task. Relaunching the play a second time is also a possible
# wokaround.
- pause: seconds=1

- name: Deploy discovery context
  command: /tmp/rally-venv/bin/rally deployment create --fromenv --name=discovery
  args:
    chdir: /root/rally_home
  environment: "{{ os_env }}"

- name: Copy rally scenarios
  copy: src="{{ bench.location }}" dest=/root/rally_home/

- name: debug
  debug: msg="rally task start /root/rally_home/{{ bench.location | basename}} --task-args '{{ bench.args }}' {{ '--os-profile SECRET_KEY' if bench.osprofiler }}"

- name: Run Rally benchmark
  command: /tmp/rally-venv/bin/rally task start {{ bench.location | basename }} --task-args '{{ bench.args }}' {{ '--os-profile SECRET_KEY' if bench.osprofiler }}
  args:
    chdir: /root/rally_home
  register: rally_output

- name: Output of Rally execution
  debug: msg="{{ rally_output }}"

- name: List available Rally reports
  command: /tmp/rally-venv/bin/rally task list --uuids-only
  args:
    chdir: /root/rally_home
  register: list

# Download rally results only if there are some reports to get back
- name: Generating Rally reports (html)
  command: /tmp/rally-venv/bin/rally task report --tasks {{ list.stdout | replace('\n', ' ') }} --out rally-{{ bench.location | basename }}.html
  args:
    chdir: /root/rally_home
  when: list.stdout != ""

- name: Generating Rally reports (json)
  command: /tmp/rally-venv/bin/rally task report --tasks {{ list.stdout | replace('\n', ' ') }} --out rally-{{ bench.location | basename }}.json
  args:
    chdir: /root/rally_home
  when: list.stdout != ""

- name: Get OSProfiler Trace Id
  shell: echo "{{ rally_output.stdout }}" | grep 'osprofiler trace show --html' | sed 's/osprofiler trace show --html //g'
  register: trace_id
  when: "{{ bench.osprofiler | bool }}"

- name: Output of OSProfiler Trace ID
  debug: msg="OSProfiler Trace ID {{ trace_id.stdout_lines[0] }}"
  when: "{{ bench.osprofiler | bool }}"

- name: Generating OSProfiler trace (json)
  command: /tmp/rally-venv/bin/osprofiler trace show --json --out trace-{{ bench.location | basename }}.json {{ trace_id.stdout_lines[0] }}
  args:
    chdir: /root/rally_home
  environment: "{{ os_env }}"
  when: "{{ bench.osprofiler | bool }}"

- name: Generating OSprofiler trace (html)
  command: /tmp/rally-venv/bin/osprofiler trace show --html --out trace-{{ bench.location | basename }}.html {{ trace_id.stdout_lines[0] }}
  args:
    chdir: /root/rally_home
  environment: "{{ os_env }}"
  when: "{{ bench.osprofiler | bool }}"
