.. _grid5000:

Grid'5000
=========


Installation
------------

Connect to a Grid'5000 frontend of your choice. Then, refer to the
:ref:`installation` section to install Enos.

To access the Grid'5000 API, you must configure
`python-grid5000 <https://pypi.org/project/python-grid5000/>`_. Please refer to
the corresponding documentation

If the `virtualenv` module is missing:

.. code-block:: bash

    $ pip install virtualenv --user     # Install virtualenv
    $ export PATH=~/.local/bin/:${PATH} # Put it into your path


Basic configuration
-------------------

The provider relies on cluster names to group the wanted resources. For example
the following is a valid resources description:

.. literalinclude:: ../../tests/functionnal/tests/grid5000/basic-00.yaml
   :language: yaml
   :linenos:


Deployment
-----------

We suggest you to run the deployment from a dedicated node (especially for large
deployment). For now the recommended way to do so is to reserve one node prior
of your reservation. In the case of an interactive deployment:

.. code-block:: bash

    frontend$ oarsub -I -l 'walltime=2:00:00'
    node$ source venv/bin/activate
    node$ <edit configuration>
    node$ enos deploy

.. note::

   You'll need to configure the access to the Grid'5000 API by setting the following
   in your ``~/.execo.conf.py`` :

  .. code-block:: python

      # ~/.execo.conf.py
      g5k_configuration = {
          'api_username': "your username",
          'api_verify_ssl_cert': False
      }


Default provider configuration
-------------------------------

The provider comes with the following default options:

.. literalinclude:: ../../enos/provider/g5k.py
   :language: python
   :start-after: # - SPHINX_DEFAULT_CONFIG
   :end-before: # + SPHINX_DEFAULT_CONFIG

They can be overriden in the configuration file.


Advanced Configuration
----------------------

The following is equivalent to the basic configuration but allows for a finer
grained definition of the resources and associated roles.

.. literalinclude:: ../../tests/functionnal/tests/grid5000/advanced-00.yaml
   :language: yaml
   :linenos:


Reservation
-----------

In order to reserve in advance the ressources needed by your deployment you can
set the ``reservation`` key to the desired sart date. And launch ``enos
deploy``.

.. code-block:: yaml

    # Reserve the 29. February 2020 at 19:00:00 for 14 hours
    provider:
      type: g5k
      ...
      reservation: 2020-02-29 19:00:00
      walltime: 14:00:00
      ...

EnOS will wait for the job to start. You can keep the process running in the
background (e.g using a screen). Alternatively you can stop it (once the
reservation is done) and relaunch it later with the exact same configuration
file. For this purpose you can leverage the ``-f`` options of EnOS.


Building an Environment
-----------------------

A personalised environment stored in Grid'5000, containing all the dependencies
to install OpenStack in subsequent deployments, may be built directly from
command line on-the-fly without and intermediary deploy execution. Run the
command ``enos build g5k``, changing the default values accordingly (specially
the ``--cluster`` one).

In order to complete the environment construction, after the execution of EnOS
on the frontend execute the ``tgz-g5k`` command following the instructions of
the `Grid5000 documentation
<https://www.grid5000.fr/w/Advanced_Kadeploy#Create_a_new_environment_from_a_customized_environment>`_
to finish the registration of the new environment.

Once the environment is registered in the database, the name of this environment
can be used in the EnOS configuration replacing the default one. For example,
let's suppose we want to use a personalised environment named
``enos-debian9-x64-openstack``, then the configuration can be set as follows:

.. code-block:: yaml

   provider:
     type: g5k
     env_name: enos-debian9-x64-openstack
     ...
